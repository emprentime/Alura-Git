SISTEMAS DE CONTROLE DE VERSÕES:

O que são (e para que servem) sistemas de controle de versões e como eles podem ajudar o nosso fluxo de desenvolvimento?

Nos ajudam a manter um histórico de alterações;
Nos ajudam a ter controle sobre cada alteração no código;
Nos ajudam para que uma alteração de determinada pessoa não influencie na alteração realizada por outra;
Etc.

COMANDOS PARA SEREM APLICADOS NO GIT BASH:


cd - Para navegar entre pastas.
ls - Para verificr quais arquivos estão na pasta.
Ctrl + L ou clear- Para limpar a tela.
touch + nome do arquivo - Para criarmos um arquivo.


Antes de qualquer interação com o git, precisamos informar quem somos para que ele armazene corretamente os dados do autor de cada uma das alterações no código.

git config --local user.name "Seu nome aqui"
git config --local user.email "seu@email.aqui"

Como fazemos para o Git passar a enxergar determinada pasta como um repositório e a observar as mudanças em seus arquivos?

O git init inicializa um repositório no diretório em que o comando for executado. A partir deste comando, o Git poderá gerenciar as modificações realizadas nos arquivos.

git init - Para inicializar um repositório Git.

O comando abaixo mostra o estado do nosso repositório, ou seja, quais arquivos foram alterados, ou não:

git status


Para monitorarmos um arquivo que nunca foi editado e salvo pelo Git, utilizaremos o comando git add + o nome do arquivo, exemplo git add index.html. Se tivéssemos vários arquivos, não precisaríamos colocar seus nomes um a um, bastando git add . para que todos os arquivos da pasta atual sejam monitorados.

git add nome_do_arquivo - Para monitorarmos um arquivo específico.
git add . - Para monitorarmos todos os arquivos do diretório.


Changes to committed - "mudanças a serem commitadas", ou salvas, enviadas.

O comando git rm + o nome do arquivo, exemplo git rm index.html serve para remover o arquivo e para que o mesmo deixe de ser monitorado.

git rm nome_do_arquivo - Para removermos o arquivo do monitoramento.


O comando git commit -m "", serve para passarmos uma mensagem de commit e por isso usamos o parâmetro -m.

git commit -m "Acrescente aqui uma pequena descrição do que foi modificado"

A boa prática pede para colocarmos mensagens descritivas, evitando que fiquem muito grandes.

Seguem algumas definições interessantes:

HEAD: Estado atual do nosso código, ou seja, onde o Git os colocou.
Working tree: Local onde os arquivos realmente estão sendo armazenados e .
index: Local onde o Git armazena o que será commitado, ou seja, o local entre a working tree e o repositório Git em si.

Link: <https://git-scm.com/book/pt-br/v2/Fundamentos-de-Git-Gravando-Altera%C3%A7%C3%B5es-em-Seu-Reposit%C3%B3rio.



Para verificarmos o histórico de alterações, cada mensagem de commits feita, o andamento do nosso projeto e etc, o comando a se utilizar é git log, que nos mostrará diversas informações, sendo a primeira delas um hash do commit.

git log

hash do commit = uma identificação única de cada commit, isto é, não existem dois commits com o mesmo hash.


Abaixo o  resultado do git log:

$ git log

commit df46b2d2e17a8b1583d732b1430b15bc208ecf39 (HEAD -> master)
Author: Marcio Roberto Leite da Silva <emprentime@gmail.com>
Date:   Sat Oct 30 16:48:24 2021 -0300

    Acento adicionado no curso de Integração Contínua

Explicação:

O comando git log nos mostrará diversas informações, sendo a primeira delas um hash do commit, uma identificação única de cada commit, isto é, não existem dois commits com o mesmo hash.

Tendo esse hash, conseguiremos realizar algumas manipulações. A informação seguinte se refere ao branch, ou "ramo" em que o commit se encontra. Neste caso, verificamos que há HEAD e master. Isto quer dizer que HEAD é o local onde nos encontramos, no nosso código, onde acontecem as alterações que fizermos, e que estamos em um ramo denominado master.

Além disso, temos a autoria do commit, e-mail configurado, data de commit, e mensagem.

O comando git config --local serve para configurarmos algo para um projeto específico, ou, para a máquina toda, podemos utilizar o git config --global.

Poderemos visualizar as configurações salvas por meio do comando git config user.name, ou git config user.email.

Alternativas ao git log:

git log --oneline - Nos permite visualizar todos os commits, sendo que cada uma ocupa uma única linha: 
git log -p - Se quisermos mais informações como as alterações do commit

Existe uma infinidade de formatos que podemos usar como filtros para mostrar nosso histórico, e em git log cheatsheet há vários delas. Como exemplo, testaremos git log --pretty="format:%H", comando que nos traz apenas o hash. O comando git log --pretty="format:%h %s", por sua vez, traz o hash resumido seguido pela mensagem do commit. Assim, podemos gerar o histórico da nossa aplicação em formatos personalizados.

Arquivo .gitignore:

Existe um arquivo especial do Git, chamado .gitignore, e todas as linhas que estiverem nele serão lidas e ignoradas pelo Git. Se temos um arquivo denominado ignorar_este_arquivo que queremos que seja ignorado, por exemplo, basta o incluirmos em .gitignore, digitando ignorar_este_arquivo simplesmente. Da mesma forma, se tivéssemos uma pasta teste, incluiríamos teste/, em uma nova linha.

Porém, antes de conferirmos isto com git status, precisaremos adicioná-los, com git add .gitignore, por exemplo, e git commit -m "Adicionando .gitignore".